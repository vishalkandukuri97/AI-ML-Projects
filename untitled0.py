# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xA8tCO8rtSHEfx4blfDtm0ubRj-sJUGg
"""





!pip install numpy
!pip install pandas

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

cars=pd.read_csv('/CarPrice_Assignment.csv')

cars.head()

cars.tail()

df.shape

cars.info()

cars.describe()

cars.columns

df=pd.read_csv()

df=pd.read_csv('/CarPrice_Assignment.csv')

missing = df.isna().sum().sort_values(ascending=False)
print("\nMissing Values:\n", missing)

# 4) Duplicate check
print("\nDuplicate rows:", df.duplicated().sum())

# 5) Separate numeric & categorical columns
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
categorical_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()

print("\nNumeric columns:", numeric_cols)
print("Categorical columns:", categorical_cols)

# Optional: Extract brand from CarName
if "CarName" in df.columns:
    df["brand"] = (
        df["CarName"]
        .astype(str)
        .str.strip()
        .str.split(" ")
        .str[0]
        .str.lower()
        .str.replace("-", "", regex=False)
        .str.replace(".", "", regex=False)
    )
    if "brand" not in categorical_cols:
        categorical_cols.append("brand")

# 6) Descriptive statistics for numeric columns
print("\nNumeric Descriptive Statistics:\n", df[numeric_cols].describe().T)

# 7) Categorical summaries
for col in categorical_cols:
    print(f"\nValue counts for {col}:\n", df[col].value_counts())

# 8) Price distribution
if "price" in df.columns:
    plt.figure(figsize=(6,4))
    plt.hist(df["price"], bins=20, color='skyblue', edgecolor='black')
    plt.title("Price Distribution")
    plt.xlabel("Price")
    plt.ylabel("Frequency")
    plt.show()

    plt.figure(figsize=(4,4))
    plt.boxplot(df["price"], vert=True)
    plt.title("Price Boxplot")
    plt.ylabel("Price")
    plt.show()

# 9) Correlation heatmap
if "price" in df.columns:
    corr = df[numeric_cols].corr()
    plt.figure(figsize=(10,8))
    plt.imshow(corr, cmap='coolwarm', aspect='auto')
    plt.colorbar()
    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), corr.columns)
    plt.title("Correlation Heatmap")
    plt.show()

    # Correlation with price
    corr_price = corr["price"].sort_values(ascending=False)
    print("\nCorrelation with Price:\n", corr_price)

# 10) Top features vs price scatter plots
if "price" in df.columns:
    top_feats = corr_price.drop("price").abs().sort_values(ascending=False).head(6).index
    for col in top_feats:
        plt.figure(figsize=(6,4))
        plt.scatter(df[col], df["price"], alpha=0.7)
        plt.title(f"{col} vs Price")
        plt.xlabel(col)
        plt.ylabel("Price")

        # Add a trend line
        x = df[col].values
        y = df["price"].values
        mask = ~np.isnan(x) & ~np.isnan(y)
        if mask.sum() > 2:
            coeffs = np.polyfit(x[mask], y[mask], 1)
            x_line = np.linspace(x[mask].min(), x[mask].max(), 100)
            y_line = coeffs[0]*x_line + coeffs[1]
            plt.plot(x_line, y_line, color='red')
        plt.show()

# Extract brand from CarName
df["brand"] = (
    df["CarName"].astype(str)
    .str.strip()
    .str.split(" ").str[0]
    .str.lower()
    .str.replace("-", "", regex=False)
    .str.replace(".", "", regex=False)
)

# Identify numeric & categorical
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
categorical_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()


# Outlier Detection

def detect_outliers_iqr(data, col):
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    return data[(data[col] < lower) | (data[col] > upper)]

print("\nOutlier counts:")
for col in numeric_cols:
    outliers = detect_outliers_iqr(df, col)
    if len(outliers) > 0:
        print(f"{col}: {len(outliers)} outliers")

from scipy.stats import skew

# Skewness Check
print("\nSkewness of numeric features:")
for col in numeric_cols:
    skew_val = skew(df[col])
    skew_type = (
        "Highly Skewed" if abs(skew_val) > 1
        else "Moderately Skewed" if abs(skew_val) > 0.5
        else "Normal"
    )
    print(f"{col}: skew={skew_val:.2f} ({skew_type})")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import skew, f_oneway
# Grouped Price Analysis

group_features = ["brand", "fueltype", "carbody", "drivewheel", "enginetype", "cylindernumber"]

for feature in group_features:
    if feature in df.columns:
        mean_prices = df.groupby(feature)["price"].mean().sort_values(ascending=False)
        plt.figure(figsize=(8,4))
        sns.barplot(x=mean_prices.index, y=mean_prices.values, palette="viridis")
        plt.title(f"Average Price by {feature}")
        plt.xticks(rotation=45)
        plt.ylabel("Average Price")
        plt.tight_layout()
        plt.show()

from google.colab import drive
drive.mount('/content/drive')

for feature in group_features:
    if feature in df.columns:
        plt.figure(figsize=(8,4))
        sns.boxplot(x=feature, y="price", data=df, palette="Set2")
        plt.title(f"Price Distribution by {feature}")
        plt.xticks(rotation=45)
        plt.show()
ntf-xtpn-ptf

for feature in group_features:
    if feature in df.columns:
        plt.figure(figsize=(8,4))
        sns.boxplot(x=feature, y="price", data=df, palette="Set2")
        plt.title(f"Price Distribution by {feature}")
        plt.xticks(rotation=45)
        plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import skew, f_oneway
# Grouped Price Analysis
df=pd.read_csv('/CarPrice_Assignment.csv')
group_features = ["brand", "fueltype", "carbody", "drivewheel", "enginetype", "cylindernumber"]

for feature in group_features:
    if feature in df.columns:
        mean_prices = df.groupby(feature)["price"].mean().sort_values(ascending=False)
        plt.figure(figsize=(8,4))
        sns.barplot(x=mean_prices.index, y=mean_prices.values, palette="viridis")
        plt.title(f"Average Price by {feature}")
        plt.xticks(rotation=45)
        plt.ylabel("Average Price")
        plt.tight_layout()
        plt.show()

for feature in group_features:
    if feature in df.columns:
        plt.figure(figsize=(8,4))
        sns.boxplot(x=feature, y="price", data=df, palette="Set2")
        plt.title(f"Price Distribution by {feature}")
        plt.xticks(rotation=45)
        plt.show()

print("\nANOVA Test Results (Price differences among groups):")
for feature in group_features:
    if feature in df.columns:
        groups = [grp["price"].values for name, grp in df.groupby(feature)]
        f_stat, p_val = f_oneway(*groups)
        print(f"{feature}: F-stat={f_stat:.2f}, p-value={p_val:.4f}")

# KDE Plots for Numeric Features

for col in numeric_cols:
    plt.figure(figsize=(6,4))
    sns.kdeplot(df[col], shade=True)
    plt.title(f"KDE Plot: {col}")
    plt.show()

numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()

# Detect skewness
skewed_feats = {}
for col in numeric_cols:
    sk_val = skew(df[col])
    if abs(sk_val) > 0.5:  # threshold for moderate skewness
        skewed_feats[col] = sk_val

print("Skewed Features (before transformation):")
for col, sk_val in skewed_feats.items():
    print(f"{col}: {sk_val:.2f}")

# Apply log1p (log(x+1)) to avoid log(0) errors
for col in skewed_feats.keys():
    df[col + "_log"] = np.log1p(df[col])

# Check skewness after transformation
print("\nSkewness (after log1p transformation):")
for col in skewed_feats.keys():
    sk_val = skew(df[col + "_log"])
    print(f"{col + '_log'}: {sk_val:.2f}")

# Save transformed dataset
df.to_csv("CarPrice_Assignment_log_transformed.csv", index=False)
print("\n Log-transformed dataset saved as CarPrice_Assignment_log_transformed.csv")

for col in numeric_cols:
    plt.figure(figsize=(6,4))
    sns.kdeplot(df[col], shade=True)
    plt.title(f"KDE Plot: {col}")
    plt.show()

# KDE Plots for Numeric Features

for col in numeric_cols:
    plt.figure(figsize=(6,4))
    sns.kdeplot(df[col], shade=True)
    plt.title(f"KDE Plot: {col}")
    plt.show()